{"version":3,"sources":["data-base/StoreBase.js","data-toplist/ToplistStore.js","component/Progress.jsx","component/Program.jsx","event/Event.js","component/Channel.jsx","page/TopList.jsx","data-program/ProgramStore.js","component/ProgramViewers.jsx","page/Program.jsx","structure/Stack.js","page/PageStack.js","App.jsx","serviceWorker.js","index.jsx"],"names":["StoreBase","isDev","Object","classCallCheck","this","method","url","extra","Promise","resolve","reject","xhr","XMLHttpRequest","open","requestBody","body","setRequestHeader","onload","status","response","statusText","onerror","send","ToplistStore","makeRequest","baseUrl","datums","JSON","parse","override","css","_templateObject","Progress","props","isVisible","react_default","a","createElement","className","dist","sizeUnit","size","color","loading","ProgramTitle","_ref","program","title","ProgramDescription","_ref2","optionalDescription","description","Program","_ref3","Program_ProgramTitle","Program_ProgramDescription","EventDefinitions","PROGRAM_CLICKED","PROGRAM_VIEWER_CLICKED","globalEmitter","EventEmitter","programToListItem","ListGroup_default","Item","key","uniqueId","action","as","onClick","emit","src_component_Program","Channel","channel","map","categories","eventKey","renderTopList","toplist","defaultActiveKey","tabContentRenderer","tabList","Tab_default","Tabs_default","transition","TopListStatusBuilder","isLoaded","error","TopListStatus","builder","createClass","value","build","setTopList","setError","TopList","topListStatus","component_Channel","component_Progress","ProgramStore","host","programId","programHost","viewerPostData","stringify","mergePostData","base","specific","copied","assign","ProgramViewers","programViewers","viewers","suppliers","supplier","supplierName","postData","basePostData","ProgramStatus","data","programStatus","_programStatus$progra","header","component_ProgramViewers","Stack","storage","item","newStack","PageType","TOP_LIST","PROGRAM","PageStack","oldStack","arguments","length","undefined","stack","clone","newPage","push","peek","pop","App","_this","possibleConstructorReturn","getPrototypeOf","call","pageStack","state","pageType","empty","toplistStore","programStore","_this2","fetchToplistAsync","on","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","handleProgramClicked","stop","_x","apply","_callee2","param","_context2","handleProgramViewerClicked","_x2","removeAllListeners","renderContent","currentPage","console","log","page_TopList","id","renderToplistContent","_ref4","page_Program","renderProgramContent","setState","updatePageStack","fetchProgramViewersAsync","fetchViewerUrl","window","_context4","t0","fetch","json","fromToplist","_context5","fromError","fetchViewerListAsync","succeededToLoad","_context6","failedToLoad","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7abdac6f.chunk.js","sourcesContent":["export default class StoreBase {\n  constructor(isDev) {\n    // boolean\n    this.isDev = isDev;\n  }\n\n  baseUrl() {\n    if (this.isDev) {\n      return \"https://gm7o2xoumj.execute-api.us-east-1.amazonaws.com/dev\";\n    } else {\n      return \"https://v189wwdfoi.execute-api.us-east-1.amazonaws.com/prod\";\n    }\n  }\n\n  makeRequest(method, url, extra) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n      let requestBody = null;\n      if (method === \"POST\" && extra && extra.body) {\n        xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        requestBody = extra.body;\n      }\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      };\n      xhr.onerror = () => {\n        reject({\n          status: xhr.status,\n          statusText: xhr.statusText\n        });\n      };\n      xhr.send(requestBody);\n    });\n  }\n}","import StoreBase from '../data-base/StoreBase';\n\nexport default class ToplistStore extends StoreBase {\n  async fetch() {\n    try {\n      let datums = await this.makeRequest(\"GET\", this.baseUrl() + \"/v2/toplist\");\n      return JSON.parse(datums);\n    } catch (error) {\n      throw error;\n    }\n  }\n}","import React from 'react';\nimport { css } from '@emotion/core';\nimport { ClipLoader } from 'react-spinners';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nconst Progress = (props) => {\n  const isVisible = props.isVisible;\n  if (isVisible) {\n    return (\n      <div className='sweet-loading'>\n        <ClipLoader\n          css={override}\n          sizeUnit={\"px\"}\n          size={150}\n          color={'#123abc'}\n          loading={true}\n        />\n      </div>\n    );\n  } else {\n    return \"\";\n  }\n};\n\nexport default Progress;","import React from 'react';\nimport './Program.css';\n\nconst ProgramTitle = ({ program }) => (<p className=\"Program-title\">{program.title}</p>);\n\nconst ProgramDescription = ({ program }) => {\n  if (!program.optionalDescription) {\n    return (\n      <div className=\"Program-description\">\n        {program.description}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"Program-description\">\n        {program.description}<br />\n        {program.optionalDescription}\n      </div>\n    );\n  }\n};\n\nconst Program = ({ program }) => (\n  <div className=\"Program\">\n    <ProgramTitle program={program} />\n    <ProgramDescription program={program} />\n  </div>\n);\n\nexport default Program;\n","import {\n  EventEmitter\n} from 'events';\n\nconst EventDefinitions = {\n  PROGRAM_CLICKED: \"program-clicked\",\n  PROGRAM_VIEWER_CLICKED: \"program-viewer-clicked\"\n};\n\nexport default EventDefinitions;\nexport const globalEmitter = new EventEmitter();","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Program from './Program';\nimport EventDefinitions, { globalEmitter } from '../event/Event';\n\nconst Channel = ({ channel }) => (<ListGroup>{channel.map(programToListItem)}</ListGroup>);\n\nconst programToListItem = (program) => {\n  const clickHandler = () => {\n    globalEmitter.emit(EventDefinitions.PROGRAM_CLICKED, program);\n  };\n\n  return (\n    <ListGroup.Item key={program.uniqueId} action as=\"a\" onClick={clickHandler}>\n      <Program program={program} />\n    </ListGroup.Item>\n  )\n};\n\nexport default Channel;\n","import React from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Progress from '../component/Progress';\nimport Channel from '../component/Channel';\n\nconst categories = [\n  { eventKey: \"DRAMA\", title: \"드라마\" },\n  { eventKey: \"ENTERTAINMENT\", title: \"오락\" },\n  { eventKey: \"DOCUMENTARY\", title: \"다큐\" },\n  { eventKey: \"EVENT\", title: \"시사\" },\n  { eventKey: \"NEWS\", title: \"뉴스,스포츠\" },\n];\n\nconst renderTopList = (toplist, defaultActiveKey, tabContentRenderer) => {\n  const tabList = categories.map(({ eventKey, title }) => (\n    <Tab eventKey={eventKey} title={title} key={eventKey}>\n      {tabContentRenderer(toplist == null ? null : toplist[eventKey])}\n    </Tab>\n  ));\n  return (\n    <Tabs defaultActiveKey={defaultActiveKey} transition={false}>\n      {tabList}\n    </Tabs>\n  );\n}\n\nconst TopList = ({ topListStatus }) => {\n  const toplist = topListStatus.toplist;\n  if (!topListStatus.isLoaded) {\n    return renderTopList(toplist, \"ENTERTAINMENT\", () => (\n      <Progress isVisible={true} />\n    ));\n  } else if (!topListStatus.error) {\n    return renderTopList(toplist, \"ENTERTAINMENT\", (channel) => (\n      <Channel channel={channel} />\n    ));\n  } else {\n    return renderTopList(toplist, \"ENTERTAINMENT\", () => (\n      <div>{topListStatus.error}</div>\n    ));\n  }\n};\n\nclass TopListStatusBuilder {\n  constructor() {\n    this.toplist = null;\n    this.isLoaded = false;\n    this.error = null;\n  }\n\n  setTopList(toplist) {\n    this.toplist = toplist;\n    this.isLoaded = true;\n    return this;\n  }\n\n  setError(error) {\n    this.error = error;\n    this.isLoaded = true;\n    return this;\n  }\n\n  build() {\n    return new TopListStatus(this);\n  }\n};\n\nexport class TopListStatus {\n  constructor(builder) {\n    this.toplist = builder.toplist;\n    this.isLoaded = builder.isLoaded;\n    this.error = builder.error;\n  }\n\n  static empty() {\n    return new TopListStatusBuilder().build();\n  }\n\n  static fromToplist(toplist) {\n    return new TopListStatusBuilder().setTopList(toplist).build();\n  }\n\n  static fromError(error) {\n    return new TopListStatusBuilder().setError(error == null ? \"Unknown error\" : error).build();\n  }\n};\n\nexport default TopList;\n","import StoreBase from '../data-base/StoreBase';\n\nexport default class ProgramStore extends StoreBase {\n  async fetchViewerListAsync(program) {\n    try {\n      let datums = await this.makeRequest(\n        \"GET\",\n        this.baseUrl() + \"/v2/program/\" + program.uniqueId + \"/\" + program.host\n      );\n      return JSON.parse(datums);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async fetchViewerUrl(programId, programHost, viewerPostData) {\n    try {\n      let extra = {\n        \"body\": JSON.stringify(viewerPostData)\n      };\n      return await this.makeRequest(\n        \"POST\",\n        this.baseUrl() + \"/v2/program/\" + programId + \"/\" + programHost + \"/viewer\",\n        extra\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n}","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport EventDefinitions, { globalEmitter } from '../event/Event';\n\nconst mergePostData = (base, specific) => {\n  const copied = Object.assign({}, base);\n  return Object.assign(copied, specific);\n};\n\nconst ProgramViewers = ({ programViewers }) => {\n  const supplierToListItem = (supplier) => {\n    const clickHandler = () => {\n      globalEmitter.emit(EventDefinitions.PROGRAM_VIEWER_CLICKED, {\n        programId: programViewers.programId,\n        programHost: programViewers.programHost,\n        postData: mergePostData(programViewers.viewers.basePostData, supplier.postData)\n      });\n    };\n    return (\n      <ListGroup.Item key={supplier.supplierName} action as=\"a\" onClick={clickHandler}>\n        {supplier.supplierName}\n      </ListGroup.Item>\n    )\n  };\n\n  return (\n    <ListGroup>\n      {programViewers.viewers.suppliers.map(supplierToListItem)}\n    </ListGroup>\n  );\n};\n\nexport default ProgramViewers;","import React from 'react';\nimport Progress from '../component/Progress';\nimport ProgramViewers from '../component/ProgramViewers';\n\nexport class ProgramStatus {\n  constructor(data) {\n    this.program = data.program;\n    this.programViewers = data.programViewers;\n    this.isLoaded = data.isLoaded;\n    this.error = data.error;\n  }\n\n  succeededToLoad(programViewers) {\n    return new ProgramStatus({\n      program: this.program,\n      programViewers: programViewers,\n      isLoaded: true\n    });\n  }\n\n  failedToLoad(error) {\n    return new ProgramStatus({\n      program: this.program,\n      error: error == null ? \"Unknown error\" : error,\n      isLoaded: true\n    });\n  }\n\n  static loading(program) {\n    return new ProgramStatus({ program: program, isLoaded: false });\n  }\n}\n\nconst Program = ({ programStatus }) => {\n  const { title, description, optionalDescription } = programStatus.program;\n  const header = !optionalDescription ? (\n    <div>\n      <h3>{title}</h3>\n      <p>{description}</p>\n    </div>\n  ) : (\n      <div>\n        <h3>{title}</h3>\n        <p>{description}<br />{optionalDescription}</p>\n      </div>\n    );\n\n  const { isLoaded, programViewers, error } = programStatus;\n  if (!isLoaded) {\n    return (\n      <div>\n        {header}\n        <Progress isVisible={true} />\n      </div>\n    );\n  } else if (programViewers) {\n    return (\n      <div>\n        {header}\n        <ProgramViewers programViewers={programStatus.programViewers} />\n      </div>\n    );\n  }\n};\n\nexport default Program;","class Stack {\n  constructor() {\n    this.storage = [];\n    this.size = 0;\n  }\n\n  push(item) {\n    this.storage[this.size++] = item;\n  }\n\n  pop() {\n    if (this.size > 0) {\n      return this.storage[--this.size];\n    } else {\n      return null;\n    }\n  }\n\n  peek() {\n    return this.size > 0 ? this.storage[this.size - 1] : null;\n  }\n\n  clone() {\n    const newStack = new Stack();\n    newStack.storage = Object.assign({}, this.storage);\n    newStack.size = this.size;\n    return newStack;\n  }\n}\n\nexport default Stack;","import Stack from '../structure/Stack';\n\nexport const PageType = {\n  TOP_LIST: \"top-list\",\n  PROGRAM: \"program\"\n};\n\nexport class PageStack {\n  constructor(oldStack = null) {\n    if (oldStack == null) {\n      this.stack = new Stack();\n    } else {\n      this.stack = oldStack.clone();\n    }\n  }\n\n  push(newPage) {\n    const newStack = new PageStack(this.stack);\n    newStack.stack.push(newPage);\n    return newStack;\n  }\n\n  peek() {\n    return this.stack.peek();\n  }\n\n  pop() {\n    const newStack = new PageStack(this.stack);\n    newStack.stack.pop();\n    return newStack;\n  }\n}","import React from 'react';\nimport './App.css';\nimport ToplistStore from './data-toplist/ToplistStore';\nimport TopList, { TopListStatus } from './page/TopList';\nimport ProgramStore from './data-program/ProgramStore';\nimport Program, { ProgramStatus } from './page/Program';\nimport EventDefinitions, { globalEmitter } from './event/Event';\nimport { PageType, PageStack } from './page/PageStack';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const pageStack = new PageStack();\n    this.state = {\n      pageStack: pageStack.push({\n        pageType: PageType.TOP_LIST,\n        topListStatus: TopListStatus.empty()\n      })\n    };\n    this.toplistStore = new ToplistStore(false);\n    this.programStore = new ProgramStore(false);\n  }\n\n  componentDidMount() {\n    this.fetchToplistAsync();\n\n    globalEmitter.on(EventDefinitions.PROGRAM_CLICKED, async (program) => {\n      await this.handleProgramClicked(program);\n    });\n\n    globalEmitter.on(EventDefinitions.PROGRAM_VIEWER_CLICKED, async (param) => {\n      const { programId, programHost, postData } = param;\n      await this.handleProgramViewerClicked(programId, programHost, postData);\n    });\n  }\n\n  componentWillUnmount() {\n    globalEmitter.removeAllListeners();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Jerry Video</h1>\n        </header>\n        <main>\n          {this.renderContent()}\n        </main>\n      </div>\n    );\n  }\n\n  currentPage() {\n    return this.state.pageStack.peek();\n  }\n\n  renderContent() {\n    const renderToplistContent = ({ topListStatus }) => (\n      <TopList topListStatus={topListStatus} id=\"page-toplist\" />\n    );\n\n    const renderProgramContent = ({ programStatus }) => (\n      <Program programStatus={programStatus} id=\"page-program\" />\n    );\n\n    const currentPage = this.currentPage();\n    console.log(\"renderContent(): currentPage=\", currentPage);\n    switch (currentPage.pageType) {\n      case PageType.TOP_LIST:\n        return renderToplistContent(currentPage);\n\n      case PageType.PROGRAM:\n        return renderProgramContent(currentPage);\n\n      default:\n        return \"\";\n    }\n  }\n\n  updatePageStack(action) {\n    this.setState({\n      pageStack: action(this.state.pageStack)\n    });\n  }\n\n  async handleProgramClicked(program) {\n    console.log(\"handleProgramClicked():\", program);\n    const programStatus = ProgramStatus.loading(program);\n    this.updatePageStack((pageStack) => pageStack.push({\n      pageType: PageType.PROGRAM,\n      programStatus: programStatus\n    }));\n    await this.fetchProgramViewersAsync(program, programStatus);\n  }\n\n  async handleProgramViewerClicked(programId, programHost, postData) {\n    console.log(\"handleProgramViewerClicked():\",\n      {\n        \"id\": programId, \"host\": programHost, \"body\": postData\n      }\n    );\n\n    try {\n      const url = await this.programStore.fetchViewerUrl(programId, programHost, postData);\n      window.open(url, \"_blank\");\n      console.log(\"handleProgramViewerClicked(): url:\", url);\n    } catch (error) {\n      console.log(\"handleProgramViewerClicked(): error:\", error);\n    }\n\n  }\n\n  async fetchToplistAsync() {\n    try {\n      const json = await this.toplistStore.fetch();\n      console.log(\"fetchToplistAsync(): success:\", json);\n\n      this.updatePageStack((pageStack) => pageStack.pop().push({\n        pageType: PageType.TOP_LIST,\n        topListStatus: TopListStatus.fromToplist(json)\n      }));\n    } catch (err) {\n      console.log(\"fetchToplistAsync(): failure:\", err);\n      this.updatePageStack((pageStack) => pageStack.pop().push({\n        pageType: PageType.TOP_LIST,\n        topListStatus: TopListStatus.fromError(err.statusText)\n      }));\n    }\n  }\n\n  async fetchProgramViewersAsync(program, programStatus) {\n    try {\n      const json = await this.programStore.fetchViewerListAsync(program);\n      console.log(\"fetchProgramViewersAsync(): success:\", json);\n\n      this.updatePageStack((pageStack) => pageStack.pop().push({\n        pageType: PageType.PROGRAM,\n        programStatus: programStatus.succeededToLoad(json)\n      }));\n    }\n    catch (err) {\n      console.log(\"fetchProgramViewersAsync(): failure:\", err);\n      this.updatePageStack((pageStack) => pageStack.pop().push({\n        pageType: PageType.PROGRAM,\n        programStatus: programStatus.failedToLoad(err.statusText)\n      }));\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App id='app' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}