{"version":3,"sources":["data-toplist/ToplistStore.js","data-base/StoreBase.js","component/Progress.jsx","component/CategoryTabs.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ToplistStore","this","makeRequest","baseUrl","datums","JSON","parse","StoreBase","isDev","Object","classCallCheck","method","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","status","response","statusText","onerror","send","override","css","_templateObject","Progress","props","isVisible","react_default","a","createElement","className","react_spinners","sizeUnit","size","color","loading","CategoryTabs","toplist","Tabs_default","defaultActiveKey","transition","Tab_default","eventKey","title","DRAMA","ENTERTAINMENT","DOCUMENTARY","EVENT","NEWS","loadedCategoryTabs","id","component_Progress","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","toplistStore","console","log","triggerToFetchToplist","component_CategoryTabs","fetch","json","setState","error","_context","t0","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00ce423d.chunk.js","sourcesContent":["import StoreBase from '../data-base/StoreBase';\n\nexport default class ToplistStore extends StoreBase {\n  async fetch() {\n    try {\n      let datums = await this.makeRequest(\"GET\", this.baseUrl() + \"/v2/toplist\");\n      return JSON.parse(datums);\n    } catch (error) {\n      throw error;\n    }\n  }\n}","export default class StoreBase {\n  constructor(isDev) {\n    // boolean\n    this.isDev = isDev;\n  }\n\n  baseUrl() {\n    if (this.isDev) {\n      return \"https://gm7o2xoumj.execute-api.us-east-1.amazonaws.com/dev\";\n    } else {\n      return \"https://v189wwdfoi.execute-api.us-east-1.amazonaws.com/prod\";\n    }\n  }\n\n  makeRequest(method, url) {\n    return new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      };\n      xhr.onerror = () => {\n        reject({\n          status: xhr.status,\n          statusText: xhr.statusText\n        });\n      };\n      xhr.send();\n    });\n  }\n}","import React from 'react';\nimport { css } from '@emotion/core';\nimport { ClipLoader } from 'react-spinners';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nconst Progress = (props) => {\n  const isVisible = props.isVisible;\n  if (isVisible) {\n    return (\n      <div className='sweet-loading'>\n        <ClipLoader\n          css={override}\n          sizeUnit={\"px\"}\n          size={150}\n          color={'#123abc'}\n          loading={true}\n        />\n      </div>\n    );\n  } else {\n    return \"\";\n  }\n};\n\nexport default Progress;","import React from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Progress from './Progress';\n\nconst inProgressTabs = () => {\n  return (\n    <Tabs defaultActiveKey=\"ENTERTAINMENT\" transition={false} id=\"toplist-category-tabs\">\n      <Tab eventKey=\"DRAMA\" title=\"드라마\">\n        <Progress isVisible={true} />\n      </Tab>\n      <Tab eventKey=\"ENTERTAINMENT\" title=\"오락\">\n        <Progress isVisible={true} />\n      </Tab>\n      <Tab eventKey=\"DOCUMENTARY\" title=\"다큐\">\n        <Progress isVisible={true} />\n      </Tab>\n      <Tab eventKey=\"EVENT\" title=\"시사\">\n        <Progress isVisible={true} />\n      </Tab>\n      <Tab eventKey=\"NEWS\" title=\"뉴스,스포츠\">\n        <Progress isVisible={true} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nconst loadedCategoryTabs = (toplist) => {\n  return (\n    <Tabs defaultActiveKey=\"ENTERTAINMENT\" transition={false}>\n      <Tab eventKey=\"DRAMA\" title=\"드라마\">\n        {toplist.DRAMA[0].title}\n      </Tab>\n      <Tab eventKey=\"ENTERTAINMENT\" title=\"오락\">\n        {toplist.ENTERTAINMENT[0].title}\n      </Tab>\n      <Tab eventKey=\"DOCUMENTARY\" title=\"다큐\">\n        {toplist.DOCUMENTARY[0].title}\n      </Tab>\n      <Tab eventKey=\"EVENT\" title=\"시사\">\n        {toplist.EVENT[0].title}\n      </Tab>\n      <Tab eventKey=\"NEWS\" title=\"뉴스,스포츠\">\n        {toplist.NEWS[0].title}\n      </Tab>\n    </Tabs>\n  );\n};\n\nconst CategoryTabs = (props) => {\n  const toplist = props.toplist;\n  if (!toplist) {\n    return inProgressTabs();\n  } else {\n    return loadedCategoryTabs(toplist);\n  }\n};\n\nexport default CategoryTabs;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ToplistStore from './data-toplist/ToplistStore';\n// import Progress from './component/Progress';\nimport CategoryTabs from './component/CategoryTabs';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toplist: null\n    };\n    this.toplistStore = new ToplistStore(false);\n  }\n\n  componentDidMount() {\n    console.log(\"Hello, world\");\n    this.triggerToFetchToplist();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Jerry Video</h1>\n        </header>\n        <main>\n          <CategoryTabs toplist={this.state.toplist} id=\"toplist-category-tabs\" />\n        </main>\n      </div>\n    );\n  }\n\n  async triggerToFetchToplist() {\n    try {\n      let json = await this.toplistStore.fetch();\n      this.setState({\n        toplist: json\n      });\n      console.log(json);\n    } catch (error) {\n      console.error('Augh, there was an error!', error.statusText);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App id='app' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}