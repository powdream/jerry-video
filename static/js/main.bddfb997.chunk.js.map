{"version":3,"sources":["data-toplist/ToplistStore.js","data-base/StoreBase.js","component/Progress.jsx","component/Program.jsx","component/Channel.jsx","page/TopList.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ToplistStore","this","makeRequest","baseUrl","datums","JSON","parse","StoreBase","isDev","Object","classCallCheck","method","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","status","response","statusText","onerror","send","override","css","_templateObject","Progress","props","isVisible","react_default","a","createElement","className","react_spinners","sizeUnit","size","color","loading","ProgramTitle","_ref","program","title","ProgramDescription","_ref2","optionalDescription","description","Program","_ref3","Program_ProgramTitle","Program_ProgramDescription","Channel","programList","channel","map","index","ListGroup_default","Item","key","uniqueId","action","as","src_component_Program","categories","eventKey","renderTopList","toplist","defaultActiveKey","tabContentRenderer","tabList","Tab_default","Tabs_default","transition","TopListStatusBuilder","isLoaded","error","createClass","value","TopListStatus","builder","TopList","topListStatus","component_Channel","component_Progress","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","build","toplistStore","triggerToFetchToplist","page_TopList","id","fetch","json","setState","setTopList","console","log","setError","_context","t0","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bddfb997.chunk.js","sourcesContent":["import StoreBase from '../data-base/StoreBase';\n\nexport default class ToplistStore extends StoreBase {\n  async fetch() {\n    try {\n      let datums = await this.makeRequest(\"GET\", this.baseUrl() + \"/v2/toplist\");\n      return JSON.parse(datums);\n    } catch (error) {\n      throw error;\n    }\n  }\n}","export default class StoreBase {\n  constructor(isDev) {\n    // boolean\n    this.isDev = isDev;\n  }\n\n  baseUrl() {\n    if (this.isDev) {\n      return \"https://gm7o2xoumj.execute-api.us-east-1.amazonaws.com/dev\";\n    } else {\n      return \"https://v189wwdfoi.execute-api.us-east-1.amazonaws.com/prod\";\n    }\n  }\n\n  makeRequest(method, url) {\n    return new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      };\n      xhr.onerror = () => {\n        reject({\n          status: xhr.status,\n          statusText: xhr.statusText\n        });\n      };\n      xhr.send();\n    });\n  }\n}","import React from 'react';\nimport { css } from '@emotion/core';\nimport { ClipLoader } from 'react-spinners';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nconst Progress = (props) => {\n  const isVisible = props.isVisible;\n  if (isVisible) {\n    return (\n      <div className='sweet-loading'>\n        <ClipLoader\n          css={override}\n          sizeUnit={\"px\"}\n          size={150}\n          color={'#123abc'}\n          loading={true}\n        />\n      </div>\n    );\n  } else {\n    return \"\";\n  }\n};\n\nexport default Progress;","import React from 'react';\nimport './Program.css';\n\nconst ProgramTitle = ({ program }) => (<p className=\"Program-title\">{program.title}</p>);\n\nconst ProgramDescription = ({ program }) => {\n  if (!program.optionalDescription) {\n    return (\n      <div className=\"Program-description\">\n        {program.description}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"Program-description\">\n        {program.description}<br />\n        {program.optionalDescription}\n      </div>\n    );\n  }\n};\n\nconst Program = ({ program }) => (\n  <div className=\"Program\">\n    <ProgramTitle program={program} />\n    <ProgramDescription program={program} />\n  </div>\n);\n\nexport default Program;\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Program from './Program';\n\n\nconst Channel = ({ channel }) => {\n  const programList = channel.map((program, index) => (\n    <ListGroup.Item key={program.uniqueId} action as=\"a\">\n      <Program program={program} />\n    </ListGroup.Item>\n  ));\n  return (<ListGroup>{programList}</ListGroup>);\n};\n\nexport default Channel;\n","import React from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Progress from '../component/Progress';\nimport Channel from '../component/Channel';\n\nconst categories = [\n  { eventKey: \"DRAMA\", title: \"드라마\" },\n  { eventKey: \"ENTERTAINMENT\", title: \"오락\" },\n  { eventKey: \"DOCUMENTARY\", title: \"다큐\" },\n  { eventKey: \"EVENT\", title: \"시사\" },\n  { eventKey: \"NEWS\", title: \"뉴스,스포츠\" },\n];\n\nconst renderTopList = (toplist, defaultActiveKey, tabContentRenderer) => {\n  const tabList = categories.map(({ eventKey, title }) => (\n    <Tab eventKey={eventKey} title={title} key={eventKey}>\n      {tabContentRenderer(toplist == null ? null : toplist[eventKey])}\n    </Tab>\n  ));\n  return (\n    <Tabs defaultActiveKey={defaultActiveKey} transition={false}>\n      {tabList}\n    </Tabs>\n  );\n}\n\nconst TopList = ({ topListStatus }) => {\n  const toplist = topListStatus.toplist;\n  if (!topListStatus.isLoaded) {\n    return renderTopList(toplist, \"ENTERTAINMENT\", () => (\n      <Progress isVisible={true} />\n    ));\n  } else if (!topListStatus.error) {\n    return renderTopList(toplist, \"ENTERTAINMENT\", (channel) => (\n      <Channel channel={channel} />\n    ));\n  } else {\n    return renderTopList(toplist, \"ENTERTAINMENT\", () => (\n      <div>{topListStatus.error}</div>\n    ));\n  }\n};\n\nexport class TopListStatusBuilder {\n  constructor() {\n    this.toplist = null;\n    this.isLoaded = false;\n    this.error = null;\n  }\n\n  setTopList(toplist) {\n    this.toplist = toplist;\n    this.isLoaded = true;\n    return this;\n  }\n\n  setError(error) {\n    this.error = error;\n    this.isLoaded = true;\n    return this;\n  }\n\n  build() {\n    return new TopListStatus(this);\n  }\n};\n\nexport class TopListStatus {\n  constructor(builder) {\n    this.toplist = builder.toplist;\n    this.isLoaded = builder.isLoaded;\n    this.error = builder.error;\n  }\n};\n\nexport default TopList;\n","import React from 'react';\nimport './App.css';\nimport ToplistStore from './data-toplist/ToplistStore';\nimport TopList, { TopListStatusBuilder } from './page/TopList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topListStatus: new TopListStatusBuilder().build()\n    };\n    this.toplistStore = new ToplistStore(false);\n  }\n\n  componentDidMount() {\n    this.triggerToFetchToplist();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Jerry Video</h1>\n        </header>\n        <main>\n          <TopList topListStatus={this.state.topListStatus} id=\"toplist-category-tabs\" />\n        </main>\n      </div>\n    );\n  }\n\n  async triggerToFetchToplist() {\n    try {\n      const json = await this.toplistStore.fetch();\n      this.setState({\n        topListStatus: new TopListStatusBuilder().setTopList(json).build()\n      });\n      console.log(json);\n    } catch (err) {\n      this.setState({\n        topListStatus: new TopListStatusBuilder()\n          .setError(err.statusText ? err.statusText : \"Unknown error\")\n          .build()\n      })\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App id='app' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}