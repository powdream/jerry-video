{"version":3,"sources":["logo.svg","data-toplist/ToplistStore.js","data-base/StoreBase.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","ToplistStore","this","makeRequest","baseUrl","datums","JSON","parse","StoreBase","isDev","Object","classCallCheck","method","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","status","response","statusText","onerror","send","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","name","isLoaded","toplist","toplistStore","console","log","triggerToFetchToplist","react_default","a","createElement","className","src","logo","alt","href","target","rel","id","String","ENTERTAINMENT","title","fetch","json","setState","error","_context","t0","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCEnBC,gUAGIC,KAAKC,YAAY,MAAOD,KAAKE,UAAY,6BAAxDC,2BACGC,KAAKC,MAAMF,4KCLtB,SAAAG,EAAYC,GAAQC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,GAElBN,KAAKO,MAAQA,wDAIb,OAAIP,KAAKO,MACA,6DAEA,kGAICG,EAAQC,GAClB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAKP,EAAQC,GACjBI,EAAIG,OAAS,WACPH,EAAII,QAAU,KAAOJ,EAAII,OAAS,IACpCN,EAAQE,EAAIK,UAEZN,EAAO,CACLK,OAAQJ,EAAII,OACZE,WAAYN,EAAIM,cAItBN,EAAIO,QAAU,WACZR,EAAO,CACLK,OAAQJ,EAAII,OACZE,WAAYN,EAAIM,cAGpBN,EAAIQ,oBCyBKC,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAlB,OAAAC,EAAA,EAAAD,CAAAR,KAAAwB,IACjBE,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAR,KAAAQ,OAAAoB,EAAA,EAAApB,CAAAgB,GAAAK,KAAA7B,KAAMyB,KACDK,MAAQ,CACXC,KAAML,EAAKD,MAAMM,KACjBC,UAAU,EACVC,QAAS,MAEXP,EAAKQ,aAAe,IAAInC,GAAa,GAPpB2B,mFAWjBS,QAAQC,IAAI,gBACZpC,KAAKqC,yDAIL,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,2BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQAT,EAAAC,EAAAC,cAAA,mCAA2BxC,KAAK8B,MAAMC,KAAtC,KAA8C/B,KAAKyB,MAAMuB,IACzDV,EAAAC,EAAAC,cAAA,uBAAeS,OAAOjD,KAAK8B,MAAME,WACjCM,EAAAC,EAAAC,cAAA,2BAAmBxC,KAAK8B,MAAMG,QAAUjC,KAAK8B,MAAMG,QAAQiB,cAAc,GAAGC,MAAQ,6LAQvEnD,KAAKkC,aAAakB,eAA/BC,SACJrD,KAAKsD,SAAS,CACZtB,UAAU,EACVC,QAASoB,IAEXlB,QAAQC,IAAIiB,mDAEZlB,QAAQoB,MAAM,4BAA6BC,EAAAC,GAAMpC,8HAjDrCqC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAKnB,GAAG,MAAMjB,KAAK,UAAYqC,SAASC,eAAe,SD2HjE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c330bf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import StoreBase from '../data-base/StoreBase';\n\nexport default class ToplistStore extends StoreBase {\n  async fetch() {\n    try {\n      let datums = await this.makeRequest(\"GET\", this.baseUrl() + \"/v2/toplist\");\n      return JSON.parse(datums);\n    } catch (error) {\n      throw error;\n    }\n  }\n}","export default class StoreBase {\n  constructor(isDev) {\n    // boolean\n    this.isDev = isDev;\n  }\n\n  baseUrl() {\n    if (this.isDev) {\n      return \"https://gm7o2xoumj.execute-api.us-east-1.amazonaws.com/dev\";\n    } else {\n      return \"https://v189wwdfoi.execute-api.us-east-1.amazonaws.com/prod\";\n    }\n  }\n\n  makeRequest(method, url) {\n    return new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      };\n      xhr.onerror = () => {\n        reject({\n          status: xhr.status,\n          statusText: xhr.statusText\n        });\n      };\n      xhr.send();\n    });\n  }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToplistStore from './data-toplist/ToplistStore';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: this.props.name,\n      isLoaded: false,\n      toplist: null\n    };\n    this.toplistStore = new ToplistStore(false);\n  }\n\n  componentDidMount() {\n    console.log(\"Hello, world\");\n    this.triggerToFetchToplist();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.jsx</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <p>Trying with class App: {this.state.name}, {this.props.id}</p>\n          <p>Is loaded: {String(this.state.isLoaded)}</p>\n          <p>ENTERTAINMENT: {this.state.toplist ? this.state.toplist.ENTERTAINMENT[0].title : \"\"}</p>\n        </header>\n      </div>\n    );\n  }\n\n  async triggerToFetchToplist() {\n    try {\n      let json = await this.toplistStore.fetch();\n      this.setState({\n        isLoaded: true,\n        toplist: json\n      });\n      console.log(json);\n    } catch (error) {\n      console.error('Augh, there was an error!', error.statusText);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App id='app' name='Jerry' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}